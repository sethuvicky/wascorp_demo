Faker = require('Faker')
moment = require('moment')
_ = require("underscore")
fs = require('fs')

companyCategories = [ 'Agriculture', 'Forestry', 'Farms', 'Groves', 'Orchards', 'Vineyards', 'Winery', 'Nursery', 'Productions', 'Tobacco', 'Ranch', 'Ranches', 'Cattle Ranch', 'Feedlots', 'Dairy', 'Aquaculture', 'Fur', 'Logging', 'Timber', 'Fishing', 'Hunting', 'Trapping', 'Planting', 'Harvesting', 'Mining', 'Quarrying', 'Stone', 'Gravel', 'Utilities', 'Power', 'Distribution', 'Controls', 'Construction', 'Residential', 'Building', 'Builders', 'Contractors', 'Manufacturing', 'Mills', 'Foods', 'Foodservice', 'Specialties', 'Processing', 'Bakeries', 'Bakery', 'Brew house', 'Distilleries', 'Leather', 'Footwear', 'Sawmills', 'Paper', 'Printing', 'Screen Printing', 'Books', 'Roofing', 'Paving', 'Painting', 'Paint', 'Tire', 'Tires', 'Pottery', 'Brick', 'Brickwork', 'Concrete', 'Steel', 'Extruding', 'Foundries', 'Utensils', 'Cutlery', 'Machining', 'Precision', 'Small Arms', 'Ordnance', 'Woodworking', 'Ventilation', 'Heating', 'Air', 'Engines', 'Turbines', 'Computer', 'Communications', 'Telephone', 'Television', 'Broadcasting', 'Wireless', 'Electronic', 'Electromedical', 'Navigational', 'Aeronautical', 'Commercial', 'Electrical Equipment', 'Appliance', 'Lighting', 'Industrial', 'Battery Manufacturing', 'Current', 'Noncurrent', 'Automobile Manufacturing', 'Aircraft Manufacturing', 'Boat Building', 'Motorcycle', 'Bicycle', 'Showcase', 'Partition', 'Mattress Manufacturing', 'Dental Laboratories', 'Toy', 'Sign Manufacturing', 'Gasket', 'Packing', 'Fastener', 'Button', 'Needle', 'Broom', 'Wholesale Trade', 'Merchant Wholesalers', 'Durable Goods', 'Lumber', 'Plywood', 'Millwork', 'Siding', 'Medical', 'Dental', 'Wiring Supplies', 'Household Appliances', 'Electric Housewares', 'Machinery', 'Equipment', 'Jewelry', 'Watch', 'Precious Stone', 'Nondurable Goods', 'Piece Goods', 'Notions', 'Men', 'Women', 'Beer', 'Wine', 'Book', 'Periodical', 'Nursery Stock', 'Varnish', 'Retail Trade', 'Automobile Dealers', 'Boat', 'Boat Dealers', 'ATV', 'Automotive Parts', 'Tire Dealers', 'Furniture Stores', 'Electronics Stores', 'Home Centers', 'Hardware Stores', 'Garden Centers', 'Garden Center', 'Grocery Stores', 'Convenience Stores', 'Meat Markets', 'Beauty Supplies', 'Gas', 'Clothes', 'Shoes', 'Luggage', 'Stores', 'Jewelry', 'Sporting Goods', 'Musical Instrument', 'Hobby', 'Sewing', 'Needlework', 'Book Stores', 'Department Stores', 'Florists', 'Office Supplies', 'Gift', 'Novelty', 'Art Dealers', 'Tobacco Stores', 'Nonstore Retailers', 'Electronics', 'Fuel Dealers', 'Transportation', 'Trucking', 'Taxi', 'Limousine', 'Pipeline', 'Newspaper', 'Books', 'Software', 'Records', 'Radio Networks', 'Radio Stations', 'Satellite', 'Telecommunications', 'Data Processing', 'News Syndicates', 'Monetary Authorities', 'Commercial Banking', 'Savings Institutions', 'Credit Union', 'Commodities', 'Securities', 'Portfolio Management', 'Trust', 'Fiduciary', 'Insurance', 'Direct Life', 'Agencies', 'Brokerages', 'Claims Adjusting', 'Funds', 'Trusts', 'Pension Funds', 'Open', 'Estates', 'Real Estate', 'Utility Trailer', 'Transportation', 'Commercial Air', 'Rail', 'Professional', 'Scientific', 'Legal Services', 'Tax Preparation', 'Bookkeeping', 'Accounting', 'Payroll Services', 'Architectural', 'Engineering', 'Architectural Services', 'Engineering Services', 'Drafting Services', 'Testing Laboratories', 'Management', 'Physical Distribution', 'Public Relations', 'Advertising Agencies', 'Media Representatives', 'Outdoor Advertising', 'Photographic Services', 'Photography Studios', 'Commercial Photography', 'Veterinary Services', 'Subsidiary', 'Employment Services', 'Collection Agencies', 'Credit Bureaus', 'Repossession Services', 'Travel Agencies', 'Tour Operators', 'Investigation', 'Guard', 'Investigation Services', 'Janitorial Services', 'Landscaping Services', 'Waste Collection', 'Remediation Services', 'Educational Services', 'Junior Colleges', 'Colleges', 'Universities', 'Computer Training', 'Flight Training', 'Apprenticeship Training', 'Language Schools', 'Medical Laboratories', 'Ambulance Services', 'Mental Health', 'Social Assistance', 'Temporary Shelters', 'Arts', 'Entertainment', 'Performing Arts', 'Spectator Sports', 'Dance Companies', 'Athletes', 'Entertainers', 'Independent Artists', 'Writers', 'Museums', 'Historical Sites', 'Amusement', 'Gambling', 'Amusement Arcades', 'Gambling Industries', 'Skiing Facilities', 'Marinas', 'Bowling Centers', 'Traveler Accommodation', 'Casino Hotels', 'Caterers', 'Full', 'Limited', 'Grill Buffets', 'Automotive Body', 'Interior', 'Car Washes', 'Hair', 'Nail', 'Barber Shops', 'Beauty Salons', 'Nail Salons', 'Coin', 'Linen Supply', 'Industrial Launderers', 'Religious', 'Grantmaking', 'Civic', 'Religious Organizations', 'Grantmaking Foundations', 'Business', 'Labor', 'Political', 'Business Associations', 'Professional Organizations', 'Political Organizations', 'Private Households', 'Public Administration', 'Executive', 'Legislative', 'Executive Offices', 'Legislative Bodies', 'Public Order', 'Courts', 'Police Protection', 'Correctional', 'Fire Protection']
adjectives = ["Adaptable", "Adventurous", "Affable", "Affectionate", "Agreeable", "Ambitious", "Brave", "Bright", "Careful", "Communicative", "Compassionate", "Conscientious", "Considerate", "Convivial", "Courageous", "Courteous", "Creative", "Decisive", "Determined", "Diligent", "Diplomatic", "Discreet", "Dynamic", "Emotional", "Energetic", "Enthusiastic", "Exuberant", "Faithful", "Fearless", "Forceful", "Frank", "Friendly", "Funny", "Generous", "Gentle", "Good", "Gregarious", "Honest", "Imaginative", "Independent", "Intellectual", "Intelligent", "Intuitive", "Inventive", "Loving", "Loyal", "Modest", "Neat", "Passionate", "Patient", "Persistent", "Pioneering", "Philosophical", "Placid", "Polite", "Powerful", "Practical", "Pro-active", "Rational", "Reliable", "Resourceful", "Sensible", "Sensitive", "Straightforward", "Sympathetic", "Thoughtful", "Tough", "Understanding", "Versatile"]
surNames = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson", "Clark", "Rodriguez", "Lewis", "Lee", "Walker", "Hall", "Allen", "Young", "Hernandez", "King", "Wright", "Lopez", "Hill", "Scott", "Green", "Adams", "Baker", "Gonzalez", "Nelson", "Carter", "Mitchell", "Perez", "Roberts", "Turner", "Phillips", "Campbell", "Parker", "Evans", "Edwards", "Collins", "Stewart", "Sanchez", "Morris", "Rogers", "Reed", "Cook", "Morgan", "Bell", "Murphy", "Bailey", "Rivera", "Cooper", "Richardson", "Cox", "Howard", "Ward", "Torres", "Peterson", "Gray", "Ramirez", "James", "Watson", "Brooks", "Kelly", "Sanders", "Price", "Bennett", "Wood", "Barnes", "Ross", "Henderson", "Coleman", "Jenkins", "Perry", "Powell", "Long", "Patterson", "Hughes", "Flores", "Washington", "Butler", "Simmons", "Foster", "Gonzales", "Bryant", "Alexander", "Russell", "Griffin", "Diaz", "Hayes", "Myers", "Ford", "Hamilton", "Graham", "Sullivan", "Wallace", "Woods", "Cole", "West", "Jordan", "Owens", "Reynolds", "Fisher", "Ellis", "Harrison", "Gibson", "McDonald", "Cruz", "Marshall", "Ortiz", "Gomez", "Murray", "Freeman", "Wells", "Webb", "Simpson", "Stevens", "Tucker", "Porter", "Hunter", "Hicks", "Crawford", "Henry", "Boyd", "Mason", "Morales", "Kennedy", "Warren", "Dixon", "Ramos", "Reyes", "Burns", "Gordon", "Shaw", "Holmes", "Rice", "Robertson", "Hunt", "Black", "Daniels", "Palmer", "Mills", "Nichols", "Grant", "Knight", "Ferguson", "Rose", "Stone", "Hawkins", "Dunn", "Perkins", "Hudson", "Spencer", "Gardner", "Stephens", "Payne", "Pierce", "Berry", "Matthews", "Arnold", "Wagner", "Willis", "Ray", "Watkins", "Olson", "Carroll", "Duncan", "Snyder", "Hart", "Cunningham", "Bradley", "Lane", "Andrews", "Ruiz", "Harper", "Fox", "Riley", "Armstrong", "Carpenter", "Weaver", "Greene", "Lawrence", "Elliott", "Chavez", "Sims", "Austin", "Peters", "Kelley", "Franklin", "Lawson", "Fields", "Gutierrez", "Ryan", "Schmidt", "Carr", "Vasquez", "Castillo", "Wheeler", "Chapman", "Oliver", "Montgomery", "Richards", "Williamson", "Johnston", "Banks", "Meyer", "Bishop", "McCoy", "Howell", "Alvarez", "Morrison", "Hansen", "Fernandez", "Garza", "Harvey", "Little", "Burton", "Stanley", "Nguyen", "George", "Jacobs", "Reid", "Kim", "Fuller", "Lynch", "Dean", "Gilbert", "Garrett", "Romero", "Welch", "Larson", "Frazier", "Burke", "Hanson", "Day", "Mendoza", "Moreno", "Bowman", "Medina", "Fowler", "Brewer", "Hoffman", "Carlson", "Silva", "Pearson", "Holland", "Douglas", "Fleming", "Jensen", "Vargas", "Byrd", "Davidson", "Hopkins", "May", "Terry", "Herrera", "Wade", "Soto", "Walters", "Curtis", "Neal", "Caldwell", "Lowe", "Jennings", "Barnett", "Graves", "Jimenez", "Horton", "Shelton", "Barrett", "Obrien", "Castro", "Sutton", "Gregory", "McKinney", "Lucas", "Miles", "Craig", "Rodriquez", "Chambers", "Holt", "Lambert", "Fletcher", "Watts", "Bates", "Hale", "Rhodes", "Pena", "Beck", "Newman", "Haynes", "McDaniel", "Mendez", "Bush", "Vaughn", "Parks", "Dawson", "Santiago", "Norris", "Hardy", "Love", "Steele", "Curry", "Powers", "Schultz", "Barker", "Guzman", "Page", "Munoz", "Ball", "Keller", "Chandler", "Weber", "Leonard", "Walsh", "Lyons", "Ramsey", "Wolfe", "Schneider", "Mullins", "Benson", "Sharp", "Bowen", "Daniel", "Barber", "Cummings", "Hines", "Baldwin", "Griffith", "Valdez", "Hubbard", "Salazar", "Reeves", "Warner", "Stevenson", "Burgess", "Santos", "Tate", "Cross", "Garner", "Mann", "Mack", "Moss", "Thornton", "Dennis", "McGee", "Farmer", "Delgado", "Aguilar", "Vega", "Glover", "Manning", "Cohen", "Harmon", "Rodgers", "Robbins", "Newton", "Todd", "Blair", "Higgins", "Ingram", "Reese", "Cannon", "Strickland", "Townsend", "Potter", "Goodwin", "Walton", "Rowe", "Hampton", "Ortega", "Patton", "Swanson", "Joseph", "Francis", "Goodman", "Maldonado", "Yates", "Becker", "Erickson", "Hodges", "Rios", "Conner", "Adkins", "Webster", "Norman", "Malone", "Hammond", "Flowers", "Cobb", "Moody", "Quinn", "Blake", "Maxwell", "Pope", "Floyd", "Osborne", "Paul", "McCarthy", "Guerrero", "Lindsey", "Estrada", "Sandoval", "Gibbs", "Tyler", "Gross", "Fitzgerald", "Stokes", "Doyle", "Sherman", "Saunders", "Wise", "Colon", "Gill", "Alvarado", "Greer", "Padilla", "Simon", "Waters", "Nunez", "Ballard", "Schwartz", "McBride", "Houston", "Christensen", "Klein", "Pratt", "Briggs", "Parsons", "McLaughlin", "Zimmerman", "French", "Buchanan", "Moran", "Copeland", "Roy", "Pittman", "Brady", "McCormick", "Holloway", "Brock", "Poole", "Frank", "Logan", "Owen", "Bass", "Marsh", "Drake", "Wong", "Jefferson", "Park", "Morton", "Abbott", "Sparks", "Patrick", "Norton", "Huff", "Clayton", "Massey", "Lloyd", "Figueroa", "Carson", "Bowers", "Roberson", "Barton", "Tran", "Lamb", "Harrington", "Casey", "Boone", "Cortez", "Clarke", "Mathis", "Singleton", "Wilkins", "Cain", "Bryan", "Underwood", "Hogan", "McKenzie", "Collier", "Luna", "Phelps", "McGuire", "Allison", "Bridges", "Wilkerson", "Nash", "Summers", "Atkins", "Wilcox", "Pitts", "Conley", "Marquez", "Burnett", "Richard", "Cochran", "Chase", "Davenport", "Hood", "Gates", "Clay", "Ayala", "Sawyer", "Roman", "Vazquez", "Dickerson", "Hodge", "Acosta", "Flynn", "Espinoza", "Nicholson", "Monroe", "Wolf", "Morrow", "Kirk", "Randall", "Anthony", "Whitaker", "Oconnor", "Skinner", "Ware", "Molina", "Kirby", "Huffman", "Bradford", "Charles", "Gilmore", "Dominguez", "Oneal", "Bruce", "Lang", "Combs", "Kramer", "Heath", "Hancock", "Gallagher", "Gaines", "Shaffer", "Short", "Wiggins", "Mathews", "McClain", "Fischer", "Wall", "Small", "Melton", "Hensley", "Bond", "Dyer", "Cameron", "Grimes", "Contreras", "Christian", "Wyatt", "Baxter", "Snow", "Mosley", "Shepherd", "Larsen", "Hoover", "Beasley", "Glenn", "Petersen", "Whitehead", "Meyers", "Keith", "Garrison", "Vincent", "Shields", "Horn", "Savage", "Olsen", "Schroeder", "Hartman", "Woodard", "Mueller", "Kemp", "Deleon", "Booth", "Patel", "Calhoun", "Wiley", "Eaton", "Cline", "Navarro", "Harrell", "Lester", "Humphrey", "Parrish", "Duran", "Hutchinson", "Hess", "Dorsey", "Bullock", "Robles", "Beard", "Dalton", "Avila", "Vance", "Rich", "Blackwell", "York", "Johns", "Blankenship", "Trevino", "Salinas", "Campos", "Pruitt", "Moses", "Callahan", "Golden", "Montoya", "Hardin", "Guerra", "McDowell", "Carey", "Stafford", "Gallegos", "Henson", "Wilkinson", "Booker", "Merritt", "Miranda", "Atkinson", "Orr", "Decker", "Hobbs", "Preston", "Tanner", "Knox", "Pacheco", "Stephenson", "Glass", "Rojas", "Serrano", "Marks", "Hickman", "English", "Sweeney", "Strong", "Prince", "McClure", "Conway", "Walter", "Roth", "Maynard", "Farrell", "Lowery", "Hurst", "Nixon", "Weiss", "Trujillo", "Ellison", "Sloan", "Juarez", "Winters", "McLean", "Randolph", "Leon", "Boyer", "Villarreal", "McCall", "Gentry", "Carrillo", "Kent", "Ayers", "Lara", "Shannon", "Sexton", "Pace", "Hull", "Leblanc", "Browning", "Velasquez", "Leach", "Chang", "House", "Sellers", "Herring", "Noble", "Foley", "Bartlett", "Mercado", "Landry", "Durham", "Walls", "Barr", "McKee", "Bauer", "Rivers", "Everett", "Bradshaw", "Pugh", "Velez", "Rush", "Estes", "Dodson", "Morse", "Sheppard", "Weeks", "Camacho", "Bean", "Barron", "Livingston", "Middleton", "Spears", "Branch", "Blevins", "Chen", "Kerr", "McConnell", "Hatfield", "Harding", "Ashley", "Solis", "Herman", "Frost", "Giles", "Blackburn", "William", "Pennington", "Woodward", "Finley", "McIntosh", "Koch", "Best", "Solomon", "McCullough", "Dudley", "Nolan", "Blanchard", "Rivas", "Brennan", "Mejia", "Kane", "Benton", "Joyce", "Buckley", "Haley", "Valentine", "Maddox", "Russo", "McKnight", "Buck", "Moon", "McMillan", "Crosby", "Berg", "Dotson", "Mays", "Roach", "Church", "Chan", "Richmond", "Meadows", "Faulkner", "Oneill", "Knapp", "Kline", "Barry", "Ochoa", "Jacobson", "Gay", "Avery", "Hendricks", "Horne", "Shepard", "Hebert", "Cherry", "Cardenas", "McIntyre", "Whitney", "Waller", "Holman", "Donaldson", "Cantu", "Terrell", "Morin", "Gillespie", "Fuentes", "Tillman", "Sanford", "Bentley", "Peck", "Key", "Salas", "Rollins", "Gamble", "Dickson", "Battle", "Santana", "Cabrera", "Cervantes", "Howe", "Hinton", "Hurley", "Spence", "Zamora", "Yang", "McNeil", "Suarez", "Case", "Petty", "Gould", "McFarland", "Sampson", "Carver", "Bray", "Rosario", "Macdonald", "Stout", "Hester", "Melendez", "Dillon", "Farley", "Hopper", "Galloway", "Potts", "Bernard", "Joyner", "Stein", "Aguirre", "Osborn", "Mercer", "Bender", "Franco", "Rowland", "Sykes", "Benjamin", "Travis", "Pickett", "Crane", "Sears", "Mayo", "Dunlap", "Hayden", "Wilder", "McKay", "Coffey", "McCarty", "Ewing", "Cooley", "Vaughan", "Bonner", "Cotton", "Holder", "Stark", "Ferrell", "Cantrell", "Fulton", "Lynn", "Lott", "Calderon", "Rosa", "Pollard", "Hooper", "Burch", "Mullen", "Fry", "Riddle", "Levy", "David", "Duke", "Odonnell", "Guy", "Michael", "Britt", "Frederick", "Daugherty", "Berger", "Dillard", "Alston", "Jarvis", "Frye", "Riggs", "Chaney", "Odom", "Duffy", "Fitzpatrick", "Valenzuela", "Merrill", "Mayer", "Alford", "McPherson", "Acevedo", "Donovan", "Barrera", "Albert", "Cote", "Reilly", "Compton", "Raymond", "Mooney", "McGowan", "Craft", "Cleveland", "Clemons", "Wynn", "Nielsen", "Baird", "Stanton", "Snider", "Rosales", "Bright", "Witt", "Stuart", "Hays", "Holden", "Rutledge", "Kinney", "Clements", "Castaneda", "Slater", "Hahn", "Emerson", "Conrad", "Burks", "Delaney", "Pate", "Lancaster", "Sweet", "Justice", "Tyson", "Sharpe", "Whitfield", "Talley", "Macias", "Irwin", "Burris", "Ratliff", "McCray", "Madden", "Kaufman", "Beach", "Goff", "Cash", "Bolton", "McFadden", "Levine", "Good", "Byers", "Kirkland", "Kidd", "Workman", "Carney", "Dale", "McLeod", "Holcomb", "England", "Finch", "Head", "Burt", "Hendrix", "Sosa", "Haney", "Franks", "Sargent", "Nieves", "Downs", "Rasmussen", "Bird", "Hewitt", "Lindsay", "Le", "Foreman", "Valencia", "Oneil", "Delacruz", "Vinson", "Dejesus", "Hyde", "Forbes", "Gilliam", "Guthrie", "Wooten", "Huber", "Barlow", "Boyle", "McMahon", "Buckner", "Rocha", "Puckett", "Langley", "Knowles", "Cooke", "Velazquez", "Whitley", "Noel", "Vang"]



Faker.Genie = 
  fullName: ()-> Faker.Name.findName.apply(Faker.Name)
  ipAddress: ()-> Faker.Internet.ip.apply(Faker.Internet)
  zipCode5: ()-> Faker.Address.zipCodeFormat(0)
  zipCode9: ()-> Faker.Address.zipCodeFormat(1)
  brStateAbbr: ()-> Faker.Address.brState(true)
  usStateAbbr: ()-> Faker.Address.usState(true)
  pattern: (pattern)->
    fakerPattern = _.flatten((({func:Faker[n][f], context:Faker[n]} for f of Faker[n] when f is pattern) for n of Faker))    
    if fakerPattern and fakerPattern.length > 0
      fakerPattern[0].func.apply(fakerPattern[0].context)
    else
      throw new Error("invalid pattern: #{pattern}")
  format: (format)->
    Faker.Helpers.replaceSymbolWithNumber(format)    

  oneOf: (items)->
    Faker.random.array_element(items)

  someOf: (items, min, max)->
    count = min + Faker.Helpers.randomNumber(min-max)
    if items.length <= count
      items
    else
      excluded = []    
      excludeCount = items.length - count
      while excluded.length < excludeCount
        itemsLeft = _.without(items, excluded)
        candidate = Faker.random.array_element(itemsLeft)
        excluded.push candidate

      selected = _.without(items, excluded)

  randomInRange: (min, max)->
    range = max - min
    min + Math.floor(Math.random() * range)

  weightedSample: (items)->
    itemMap = _.map items, (item)->
      o = 
        weight: item[0]
        value: item[1]

    total = _.reduce itemMap, (memo, item) -> 
        item.range = [memo, memo + item.weight - 0.0001]
        memo + item.weight
    , 0

    seed = Math.random() * total
    value = null
    for i in itemMap
      if seed >= i.range[0] and seed <= i.range[1]
        value = i.value
        break
    value

  jobTitle: ()->
    prefix = ["Lead","Senior","Direct","Corporate","Dynamic","Future","Product","National","Regional","District","Central","Global","Customer","Investor","Dynamic","International","Legacy","Forward","Internal","Human","Chief","Principal"]
    modifier = ["Solutions","Program","Brand","Security","Research","Marketing","Directives","Implementation","Integration","Functionality","Response","Paradigm","Tactics","Identity","Markets","Group","Division","Applications","Optimization","Operations","Infrastructure","Intranet","Communications","Web","Branding","Quality","Assurance","Mobility","Accounts","Data","Creative","Configuration","Accountability","Interactions","Factors","Usability","Metric"]
    job = ["Supervisor","Associate","Executive","Liason","Officer","Manager","Engineer","Specialist","Director","Coordinator","Administrator","Architect","Analyst","Designer","Planner","Orchestrator","Technician","Developer","Producer","Consultant","Assistant","Facilitator","Agent","Representative","Strategist"]

    if Math.random() > 0.5
      title = "#{Faker.Genie.oneOf(prefix)} #{Faker.Genie.oneOf(modifier)} #{Faker.Genie.oneOf(job)}"
    else
      title = "#{Faker.Genie.oneOf(modifier)} #{Faker.Genie.oneOf(job)}"

  company: ()->
    modifiers = _.union adjectives, surNames
    modifier = Faker.Genie.oneOf(modifiers)
    category = Faker.Genie.oneOf(companyCategories)
    companyType = Faker.Genie.weightedSample [
      [65, null], 
      [20, "Inc."], 
      [10, "LLC."], 
      [5, "Co."]
    ]
    name = modifier + " " + category
    
    if companyType
      fullName = name + " " + companyType
    else
      fullName = name

    if companyType
      name + " " + this.companyType
    else
      name
    
    cat = category
    _.each [/\s+Stores/, /\s+Services/], (r)->
      cat = cat.replace r, ""

    conj = Faker.Genie.oneOf ["-", ""]

    domain = modifier.replace(/\s/, conj).toLowerCase() + conj + cat.replace(/\s/, conj).toLowerCase() + Faker.Genie.weightedSample [
      [90, ".com"], 
      [10, ".org"]
    ]

    words = name.split(/\s+/)

    shortName = ""
    temp = ""
    _.each words, (w)->
      temp = shortName + " " + w
      if temp.length <= 25
        shortName = temp

    emailScheme = Faker.Genie.weightedSample [
      [65, (firstName, lastName)->
        email = firstName.substr(0,1) + lastName + "@" + domain        
        email.toLowerCase()
      ], 
      [20, (firstName, lastName)->
        email = firstName + "." + lastName + "@" + domain
        email.toLowerCase()
      ],
      [10, (firstName, lastName)->
        email = lastName.substr(0,4) + Faker.Genie.format("####") + "@" + domain        
        email.toLowerCase()
      ],
      [5, (firstName, lastName)->
        email = firstName + "-" + lastName + "@" + domain
        email.toLowerCase()
      ]
    ]

    company = 
      modifier: modifier
      category: category
      companyType: companyType
      commonName: name
      fullName: fullName
      shortName: shortName
      domain: domain
      emailFn: emailScheme

  user: (company)->
    firstName = Faker.Genie.pattern("firstName")
    lastName = Faker.Genie.pattern("lastName")
    if company and company.emailFn 
      email = company.emailFn(firstName, lastName)
    else
      email = pattern("email")

    object = 
      firstName: firstName
      lastName: lastName
      email: email

genie = (template, rootObject)->
  if not template
    # without a template, just return the Faker object
    return Faker.Genie
  else
    obj = {}
    if not rootObject
      rootObject = obj
    for c of template
      current = template[c]
      if not current.exists or current?.exists.apply obj, [Faker.Genie]
        if _.isFunction(current)
          obj[c] = current.apply(obj, [Faker.Genie, rootObject])

        else if current.template
          min = current.min or current.range?[0] or 0
          max = current.max or current.range?[1] or 5 # 5 seems like a reasonable default   

          if not current.min and not current.max 
            obj[c] = genie(current.template, rootObject)
          else  
            count = Faker.Helpers.randomNumber(max-min)
            arr = []
            for i in [1..count]
              arr.push genie(current.template, rootObject)
            obj[c] = arr

        else if current.minAge or current.maxAge
          # this one is a date
          min = current.minAge || 0
          max = current.maxAge || 365
          if current.format
            obj[c] = moment().subtract('days', (min + Faker.Helpers.randomNumber(max-min))).format(current.format)
          else
            obj[c] = moment().subtract('days', (min + Faker.Helpers.randomNumber(max-min))).clone().toDate()
        else if current.min or current.max or current.range
          min = current.min or current.range?[0] or 0
          max = current.max or current.range?[1] or 1000000
          places = current.places or 0
          if places
            obj[c] = ((min*Math.pow(10, places)) + Faker.Helpers.randomNumber(max*Math.pow(10, places)-min*Math.pow(10, places)))/Math.pow(10, places)
          else
            obj[c] = min + Faker.Helpers.randomNumber(max-min)
          if current.round
            obj[c] = Math.floor(obj[c] / current.round) * current.round

        else if current.pattern
          # this is a standard pattern
          obj[c] = Faker.Genie.pattern.apply(obj, [current.pattern])
        else if current.format
          #this is a simple symbol replacement
          obj[c] = Faker.Genie.format.apply(obj, [current.format])
            
        else if current.someOf
          obj[c] = Faker.Genie.someOf.apply(obj, [current.someOf, 1, current.someOf.length])

        else if current.oneOf
          obj[c] = Faker.Genie.oneOf.apply(obj, [current.oneOf])

        else if current.weightedSample
          obj[c] = Faker.Genie.weightedSample.apply(obj, [current.weightedSample])

    obj

module.exports = genie
