genie = require('genie')
isodate = require("iso8601")
fs = require("fs")
program = require("commander")
pkg = require("./package.json")
_ = require("lodash")

program
  .version(pkg.version)
  .option('-t, --type <array|mongoimport>', 'The type of format to generate', String, "mongoimport")
  .option('-o, --output <file>', 'The file to which to output the generated records', String, "output.json")
  .option('-n, --number <records>', 'The number of records to generate', Number, 1000)
  .parse(process.argv);

template = 
  workId:
    format: "000000######"
  div:
    oneOf: [
      "1A", 
      "2B", 
      "3C",
      "4D",
      "5E",
      "6F",
      "7G",
      "8H"
    ]

  dept:
    format: '#######'

  vendorNbr:
    format: '#######'

  vendorName:
    pattern: 'companyName'

  vendorShortName: ()->
    words = this.vendorName.replace(/\s(and|\&)/,'').split(" ")
    if words.length < 2
      this.vendorName
    else
      _.first(words, words.length-1).join(" ")

  vendorAddr1:
    pattern: 'streetAddress'

  vendorAddr2:
    pattern: 'secondaryAddress'

  vendorAddr3: ()->
    null

  vendorCity:
    pattern: 'city'

  vendorState:
    pattern: 'usStateAbbr'

  vendorPostalCode:
    pattern: 'zipCode'

  vendorCountry: ()->
    "US"

  vendor1099:
    weightedSample: [
      [10, "Y"], 
      [90, "N"]
    ]

  vendorTerms:
    weightedSample: [
      [20, "2-10NET30"], 
      [30, "1-10NET30"], 
      [45, "NET30"], 
      [5, "NET0"]
    ]

  vendorAddrNbr:
    weightedSample: [
      [10, 3], 
      [20, 2], 
      [70, 1]
    ]

  vendorSearchType: ()->
    null # What is this used for? 

  origInvNbr:
    format: '##########'

  invNbr: ()->
    this.origInvNbr

  invDate: ()->    
    d = Math.floor((new Date()).getTime() - (Math.random() * (1000*60*60*24) * 365))
    new Date(d)
    
  invSalesTaxAmt: ()->
    rdm = Math.random()
    if 0.64 < rdm < 0.90
      Math.floor(this.invAmt * rdm )/100
    else
      0

  invFreightAmt: ()->
    rdm = Math.random()
    if 0.14 < rdm < 0.40
      Math.floor(this.invAmt * rdm * 10)/100
    else
      0

  invMiscChargesAmt: ()->
    rdm = Math.random()
    if 0.14 < rdm < 0.30
      Math.floor(this.invAmt * rdm * 4)/100
    else
      0

  attachmentCode: ()->
    null

  discAmt: ()->
    m = this.vendorTerms.match(/^(\d)/)
    if m
      Math.floor(this.invAmt * parseInt(m))/100
    else
      0

  invDueDate: ()->
    switch this.vendorTerms
      when "2-10NET30"  
        days = 10
      when "1-10NET30"
        days = 10
      when "NET30"
        days = 30
      else
        days = 0

    d = this.invDate.getTime() + ((1000*60*60*24) * days)
    new Date(d)

  poNbr:
    format: "########"

  # receiptNbr: # Is this used at USF?

  remarks:
    pattern: 'sentence'

  uploadDt: (genie)->
    days = genie.randomInRange -4, 9
    d = new Date(this.invDueDate.getTime() + ((1000*60*60*24) * days))

  checkDt: (genie)->
    days = genie.randomInRange 1, 3
    d = new Date(this.uploadDt.getTime() + ((1000*60*60*24) * days))

  checkNbr: (genie)->
    if this.checkDt
      genie.format '########'

  expressCheck: 
    weightedSample: [
      [10, "Y"]
      [90, "N"]
    ]

  separateCheck: (genie)->
    if this.expressCheck is "Y"
      # Express Checks have to be separate checks
      "Y"
    else
      genie.weightedSample [
        [10, "Y"]
        [90, "N"]
      ]

  spHandleSw: ()->
    if this.separateCheck is "Y"
      "Y"
    else
      "N"

  spHandleCd: (genie)->
    if this.spHandleSw is "Y"
      genie.weightedSample [
        [10, "W"]
        [10, "H"]
        [10, "A"]
        [10, "T"]
      ]

  # taxCode:

  accrualFlg: 
    weightedSample: [
      [10, "Y"]
      [90, "N"]
    ]


  # saleTaxFlg:
  # requestorName:
  # requestorPhone:
  # requestorEmail:
  # onBehalfOf:
  # vndrLoc:
  # spHandleComment:
  # billTo:
  # matterNbr:
  # matterName:
  # expenditureType:
  # lcrFeeAmt:
  # capFlg:
  # ersFlag:

  workItem:
    template:
      workId: (genie, root)->
        root.workId
      queue: (genie, root)->
        if root.uploadDt
          if root.checkDt
            "END_OF_WORKFLOW"
          else
            "CHECK_WAIT"
        else
          genie.weightedSample [
            [10, "REVIEW"]
            [50, "APPROVAL"]
            [20, "CONTROLLER"]
            [20, "AP_EXCEPT"]
          ]

      docType: 
        weightedSample: [
            [10, "CRQ"]
            [90, "NPO"]
          ]


  glLines:
    # contains GL Information for Invoies
    min: 1
    max: 2
    template:
      glBusUnit:
        oneOf: [
          "1A", 
          "2B", 
          "3C",
          "4D",
          "5E",
          "6F",
          "7G",
          "8H"
        ]

      glDept:
        format: "####"

      glAcctCode:
        format: "######"        

      glDesc:
        pattern: 'sentence'

      # glType: # what is this?

      glAmt:
        min: 2.50
        max: 200
        decimal: 2

      glValidFlg: ()->
        "Y"

      # validateLine: # not sure what this is either

      glProjectId: (genie)->
        rdm = Math.random()
        if rdm > 0.90
          genie.format("########")

      glActivityId: (genie)->
        if this.glProjectId
          genie.format("####")

      glCER: ()->
        null

      taxable: ()->


      glAcctDesc: ()->
        null

      # glError:

      # glResourceNbr:

      # chargeableDiv:

      # glProjectDescr:

      # glCustNbr:

      # category:

      # subCategory:

  origInvAmt: ()->
    total = _.reduce this.apdAcctLines, (memo, line) -> 
      memo + line.glAmt 
    , 0    

  invAmt: ()->
    this.origInvAmt



records = []
data = ""
for i in [1..program.number]
  records.push genie(template)
  data += "#{JSON.stringify(genie(template))}\n"

if program.type is "mongoimport"
  fs.writeFile program.output, data, (err, results)->
    if err 
      console.log err
    console.log "#{records.length} records output"
else
  fs.writeFile program.output, JSON.stringify(records, null, 2), (err, results)->
    if err 
      console.log err
    console.log "#{records.length} records output"
