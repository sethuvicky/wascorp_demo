// Generated by CoffeeScript 1.5.0
(function() {
  var data, fs, genie, i, isodate, pkg, program, records, template, _, _i, _ref;

  genie = require('genie');

  isodate = require("iso8601");

  fs = require("fs");

  program = require("commander");

  pkg = require("./package.json");

  _ = require("lodash");

  program.version(pkg.version).option('-t, --type <array|mongoimport>', 'The type of format to generate', String, "mongoimport").option('-o, --output <file>', 'The file to which to output the generated records', String, "output.json").option('-n, --number <records>', 'The number of records to generate', Number, 1000).parse(process.argv);

  template = {
    workId: {
      format: "000000######"
    },
    div: {
      oneOf: ["1A", "2B", "3C", "4D", "5E", "6F", "7G", "8H"]
    },
    dept: {
      format: '#######'
    },
    vendorNbr: {
      format: '#######'
    },
    vendorName: {
      pattern: 'companyName'
    },
    vendorShortName: function() {
      var words;
      words = this.vendorName.replace(/\s(and|\&)/, '').split(" ");
      if (words.length < 2) {
        return this.vendorName;
      } else {
        return _.first(words, words.length - 1).join(" ");
      }
    },
    vendorAddr1: {
      pattern: 'streetAddress'
    },
    vendorAddr2: {
      pattern: 'secondaryAddress'
    },
    vendorAddr3: function() {
      return null;
    },
    vendorCity: {
      pattern: 'city'
    },
    vendorState: {
      pattern: 'usStateAbbr'
    },
    vendorPostalCode: {
      pattern: 'zipCode'
    },
    vendorCountry: function() {
      return "US";
    },
    vendor1099: {
      weightedSample: [[10, "Y"], [90, "N"]]
    },
    vendorTerms: {
      weightedSample: [[20, "2-10NET30"], [30, "1-10NET30"], [45, "NET30"], [5, "NET0"]]
    },
    vendorAddrNbr: {
      weightedSample: [[10, 3], [20, 2], [70, 1]]
    },
    vendorSearchType: function() {
      return null;
    },
    origInvNbr: {
      format: '##########'
    },
    invNbr: function() {
      return this.origInvNbr;
    },
    invDate: function() {
      var d;
      d = Math.floor((new Date()).getTime() - (Math.random() * (1000 * 60 * 60 * 24) * 365));
      return new Date(d);
    },
    invSalesTaxAmt: function() {
      var rdm;
      rdm = Math.random();
      if ((0.64 < rdm && rdm < 0.90)) {
        return Math.floor(this.invAmt * rdm) / 100;
      } else {
        return 0;
      }
    },
    invFreightAmt: function() {
      var rdm;
      rdm = Math.random();
      if ((0.14 < rdm && rdm < 0.40)) {
        return Math.floor(this.invAmt * rdm * 10) / 100;
      } else {
        return 0;
      }
    },
    invMiscChargesAmt: function() {
      var rdm;
      rdm = Math.random();
      if ((0.14 < rdm && rdm < 0.30)) {
        return Math.floor(this.invAmt * rdm * 4) / 100;
      } else {
        return 0;
      }
    },
    attachmentCode: function() {
      return null;
    },
    discAmt: function() {
      var m;
      m = this.vendorTerms.match(/^(\d)/);
      if (m) {
        return Math.floor(this.invAmt * parseInt(m)) / 100;
      } else {
        return 0;
      }
    },
    invDueDate: function() {
      var d, days;
      switch (this.vendorTerms) {
        case "2-10NET30":
          days = 10;
          break;
        case "1-10NET30":
          days = 10;
          break;
        case "NET30":
          days = 30;
          break;
        default:
          days = 0;
      }
      d = this.invDate.getTime() + ((1000 * 60 * 60 * 24) * days);
      return new Date(d);
    },
    poNbr: {
      format: "########"
    },
    remarks: {
      pattern: 'sentence'
    },
    uploadDt: function(genie) {
      var d, days;
      days = genie.randomInRange(-4, 9);
      return d = new Date(this.invDueDate.getTime() + ((1000 * 60 * 60 * 24) * days));
    },
    checkDt: function(genie) {
      var d, days;
      days = genie.randomInRange(1, 3);
      return d = new Date(this.uploadDt.getTime() + ((1000 * 60 * 60 * 24) * days));
    },
    checkNbr: function(genie) {
      if (this.checkDt) {
        return genie.format('########');
      }
    },
    expressCheck: {
      weightedSample: [[10, "Y"], [90, "N"]]
    },
    separateCheck: function(genie) {
      if (this.expressCheck === "Y") {
        return "Y";
      } else {
        return genie.weightedSample([[10, "Y"], [90, "N"]]);
      }
    },
    spHandleSw: function() {
      if (this.separateCheck === "Y") {
        return "Y";
      } else {
        return "N";
      }
    },
    spHandleCd: function(genie) {
      if (this.spHandleSw === "Y") {
        return genie.weightedSample([[10, "W"], [10, "H"], [10, "A"], [10, "T"]]);
      }
    },
    accrualFlg: {
      weightedSample: [[10, "Y"], [90, "N"]]
    },
    workItem: {
      template: {
        workId: function(genie, root) {
          return root.workId;
        },
        queue: function(genie, root) {
          if (root.uploadDt) {
            if (root.checkDt) {
              return "END_OF_WORKFLOW";
            } else {
              return "CHECK_WAIT";
            }
          } else {
            return genie.weightedSample([[10, "REVIEW"], [50, "APPROVAL"], [20, "CONTROLLER"], [20, "AP_EXCEPT"]]);
          }
        },
        docType: {
          weightedSample: [[10, "CRQ"], [90, "NPO"]]
        }
      }
    },
    glLines: {
      min: 1,
      max: 2,
      template: {
        glBusUnit: {
          oneOf: ["1A", "2B", "3C", "4D", "5E", "6F", "7G", "8H"]
        },
        glDept: {
          format: "####"
        },
        glAcctCode: {
          format: "######"
        },
        glDesc: {
          pattern: 'sentence'
        },
        glAmt: {
          min: 2.50,
          max: 200,
          decimal: 2
        },
        glValidFlg: function() {
          return "Y";
        },
        glProjectId: function(genie) {
          var rdm;
          rdm = Math.random();
          if (rdm > 0.90) {
            return genie.format("########");
          }
        },
        glActivityId: function(genie) {
          if (this.glProjectId) {
            return genie.format("####");
          }
        },
        glCER: function() {
          return null;
        },
        taxable: function() {},
        glAcctDesc: function() {
          return null;
        }
      }
    },
    origInvAmt: function() {
      var total;
      return total = _.reduce(this.apdAcctLines, function(memo, line) {
        return memo + line.glAmt;
      }, 0);
    },
    invAmt: function() {
      return this.origInvAmt;
    }
  };

  records = [];

  data = "";

  for (i = _i = 1, _ref = program.number; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
    records.push(genie(template));
    data += "" + (JSON.stringify(genie(template))) + "\n";
  }

  if (program.type === "mongoimport") {
    fs.writeFile(program.output, data, function(err, results) {
      if (err) {
        console.log(err);
      }
      return console.log("" + records.length + " records output");
    });
  } else {
    fs.writeFile(program.output, JSON.stringify(records, null, 2), function(err, results) {
      if (err) {
        console.log(err);
      }
      return console.log("" + records.length + " records output");
    });
  }

}).call(this);
